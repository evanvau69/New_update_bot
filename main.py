from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)
from twilio.rest import Client

# In-memory session and user number tracking
user_sessions = {}
user_numbers = {}

# Login command
async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        sid = context.args[0]
        auth_token = context.args[1]
        client = Client(sid, auth_token)
        client.api.accounts(sid).fetch()

        user_sessions[update.effective_user.id] = {
            "sid": sid,
            "auth_token": auth_token
        }

        await update.message.reply_text("‚úÖ ‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá!")
    except Exception as e:
        await update.message.reply_text("‚ùå ‡¶≤‡¶ó‡¶á‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§ SID ‡¶Ö‡¶•‡¶¨‡¶æ AUTH TOKEN ‡¶≠‡ßÅ‡¶≤‡•§")

# Helper function to get Twilio client
def get_twilio_client(user_id):
    session = user_sessions.get(user_id)
    if session:
        return Client(session["sid"], session["auth_token"])
    return None

# Buy number command
async def buy_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    client = get_twilio_client(user_id)
    if not client:
        await update.message.reply_text("‚ùóÔ∏è‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø‡•§ /login ‡¶¶‡¶ø‡ßü‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    numbers = client.available_phone_numbers("CA").local.list(limit=50)

    keyboard = [
        [InlineKeyboardButton(num.phone_number, callback_data=f"select_{num.phone_number}")]
        for num in numbers
    ]
    markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("üá®üá¶ ‡¶®‡¶ø‡¶ö‡ßá ‡¶ï‡¶æ‡¶®‡¶æ‡¶°‡¶ø‡ßü‡¶æ‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü:", reply_markup=markup)

# Callback for number selection and buy
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    client = get_twilio_client(user_id)
    if not client:
        await query.edit_message_text("‚ùóÔ∏è‡¶Ü‡¶™‡¶®‡¶ø ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø‡•§")
        return

    data = query.data

    if data.startswith("select_"):
        phone_number = data.split("_")[1]
        keyboard = [
            [InlineKeyboardButton("Buy üéâ", callback_data=f"buy_{phone_number}")]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(f"‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: {phone_number}", reply_markup=markup)

    elif data.startswith("buy_"):
        new_number = data.split("_")[1]

        # Delete old number if exists
        if user_id in user_numbers:
            try:
                old_sid = user_numbers[user_id]
                client.incoming_phone_numbers(old_sid).delete()
                await query.message.reply_text("‚ùå ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
            except:
                await query.message.reply_text("‚ö†Ô∏è ‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

        # Buy new number
        incoming_number = client.incoming_phone_numbers.create(phone_number=new_number)
        user_numbers[user_id] = incoming_number.sid

        await query.message.reply_text(f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶ü‡¶ø ‡¶ï‡¶ø‡¶®‡ßá‡¶õ‡ßá‡¶®: {new_number}")

# Show incoming messages
async def show_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    client = get_twilio_client(user_id)

    if not client:
        await update.message.reply_text("‚ùóÔ∏è‡¶Ü‡¶™‡¶®‡¶ø ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø‡•§")
        return

    if user_id not in user_numbers:
        await update.message.reply_text("‚ùóÔ∏è‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü‡¶ø‡¶≠ ‡¶®‡ßá‡¶á‡•§")
        return

    phone_sid = user_numbers[user_id]
    number = client.incoming_phone_numbers(phone_sid).phone_number

    messages = client.messages.list(to=number, limit=10)
    if not messages:
        await update.message.reply_text("‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶®‡¶ï‡¶æ‡¶Æ‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
        return

    text = f"üì® Incoming messages for {number}:\n\n"
    for msg in messages:
        text += f"From: {msg.from_}\nBody: {msg.body}\n\n"

    await update.message.reply_text(text)

# Bot start
app = ApplicationBuilder().token("7920919744:AAFDXdbj8OB68YsgxqdPaf3FwKPgUNbQmnM").build()

app.add_handler(CommandHandler("login", login))
app.add_handler(CommandHandler("buy_number", buy_number))
app.add_handler(CommandHandler("show", show_messages))
app.add_handler(CallbackQueryHandler(button_handler))

app.run_polling()
