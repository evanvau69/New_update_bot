from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from twilio.rest import Client
import os

# ‡¶∏‡ßç‡¶ü‡ßã‡¶∞ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡ßç‡¶≤‡¶æ‡ßü‡ßá‡¶®‡ßç‡¶ü
user_clients = {}

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ï‡ßá‡¶®‡¶æ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞
user_purchased_numbers = {}

# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Welcome to the Twilio Bot! Use /login to connect your Twilio account.")

# /login ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Please send your Twilio SID.")

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶≤‡ßá ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if user_id not in user_clients:
        context.user_data["sid"] = text
        await update.message.reply_text("Now send your Twilio Auth Token.")
    elif "sid" in context.user_data and "token" not in context.user_data:
        sid = context.user_data["sid"]
        token = text
        try:
            client = Client(sid, token)
            client.api.accounts(sid).fetch()
            user_clients[user_id] = client
            context.user_data["token"] = token
            await update.message.reply_text("‚úÖ Successfully logged in!")
        except Exception:
            await update.message.reply_text("‚ùå Invalid SID or Token. Try again with /login.")

# /buy_number: ‡ß´‡ß¶‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü
async def buy_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    client = user_clients.get(user_id)
    if not client:
        await update.message.reply_text("‚ö†Ô∏è Please login first using /login.")
        return

    numbers = client.available_phone_numbers("CA").local.list(limit=50)
    if not numbers:
        await update.message.reply_text("‚ùå No Canadian numbers found.")
        return

    keyboard = [
        [InlineKeyboardButton(n.phone_number, callback_data=f"SELECT:{n.phone_number}")]
        for n in numbers
    ]
    await update.message.reply_text("Choose a number to buy:", reply_markup=InlineKeyboardMarkup(keyboard))

# ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ Buy ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
async def select_number_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    number = query.data.split("SELECT:")[1]
    keyboard = [[InlineKeyboardButton("Buy üéâ", callback_data=f"CONFIRM_BUY:{number}")]]
    await query.message.reply_text(f"‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: {number}", reply_markup=InlineKeyboardMarkup(keyboard))

# Buy ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ï‡ßá‡¶®‡¶æ
async def buy_selected_number_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    number = query.data.split("CONFIRM_BUY:")[1]
    client = user_clients.get(user_id)

    if not client:
        await query.edit_message_text("‚ö†Ô∏è ‡¶Ü‡¶ó‡ßá /login ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    try:
        # ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßã
        existing = client.incoming_phone_numbers.list(limit=1)
        if existing:
            existing[0].delete()

        # ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶®‡ßã
        purchased = client.incoming_phone_numbers.create(phone_number=number)
        user_purchased_numbers[user_id] = purchased.phone_number

        keyboard = [[InlineKeyboardButton("Show Messages üü¢", callback_data=f"SHOW_MESSAGES:{number}")]]
        await query.edit_message_text(f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶ü‡¶ø ‡¶ï‡¶ø‡¶®‡ßá‡¶õ‡ßá‡¶®: {purchased.phone_number}", reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        await query.edit_message_text("‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ï‡ßá‡¶®‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

# Show Messages ‡¶¨‡¶æ‡¶ü‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def show_messages_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    client = user_clients.get(user_id)

    if not client:
        await query.edit_message_text("‚ö†Ô∏è ‡¶Ü‡¶ó‡ßá /login ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    try:
        messages = client.messages.list(limit=20)
        incoming = [m for m in messages if m.direction == "inbound"]
        if not incoming:
            await query.edit_message_text("‡¶ï‡ßã‡¶®‡ßã Incoming Message ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
            return

        output = "\n\n".join([f"From: {m.from_}\nTo: {m.to}\nBody: {m.body}" for m in incoming[:5]])
        await query.edit_message_text(output)
    except Exception as e:
        await query.edit_message_text("‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def main():
    token = os.getenv("8058100416:AAHxtVSOadxiyhXYMCVT748pZqQcdqDk-84")
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("login", login))
    app.add_handler(CommandHandler("buy_number", buy_number))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(select_number_handler, pattern="^SELECT:"))
    app.add_handler(CallbackQueryHandler(buy_selected_number_handler, pattern="^CONFIRM_BUY:"))
    app.add_handler(CallbackQueryHandler(show_messages_handler, pattern="^SHOW_MESSAGES:"))

    app.run_polling()

if __name__ == "__main__":
    main()
